/*
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * API version: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package nodeumsdk

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// TapeDrivesApiService TapeDrivesApi service
type TapeDrivesApiService service

/*
CreateTapeDriveByTapeLibrary Creates a new tape drive.
**API Key Scope**: tape_drives / create
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param tapeDriveBody
@return TapeDrive
*/
func (a *TapeDrivesApiService) CreateTapeDriveByTapeLibrary(ctx _context.Context, tapeLibraryId string, tapeDriveBody TapeDrive) (TapeDrive, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeDrive
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tape_drives"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &tapeDriveBody
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 201 {
			var v TapeDrive
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
DestroyTapeDrive Destroys a specific tape drive.
**API Key Scope**: tape_drives / destroy
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeDriveId Numeric ID, serial, or name of tape drive.
*/
func (a *TapeDrivesApiService) DestroyTapeDrive(ctx _context.Context, tapeDriveId string) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_drives/{tape_drive_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_drive_id"+"}", _neturl.QueryEscape(parameterToString(tapeDriveId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
DestroyTapeDriveByTapeLibrary Destroys a specific tape drive.
**API Key Scope**: tape_drives / destroy
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param tapeDriveId Numeric ID, serial, or name of tape drive.
*/
func (a *TapeDrivesApiService) DestroyTapeDriveByTapeLibrary(ctx _context.Context, tapeLibraryId string, tapeDriveId string) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"tape_drive_id"+"}", _neturl.QueryEscape(parameterToString(tapeDriveId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

/*
IndexTapeDriveDevices Lists tape drives devices.
**API Key Scope**: tape_drives / devices
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param jobId ID of active job
@return TapeDriveDeviceCollection
*/
func (a *TapeDrivesApiService) IndexTapeDriveDevices(ctx _context.Context, tapeLibraryId string, jobId string) (TapeDriveDeviceCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeDriveDeviceCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tape_drives/-/devices"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("job_id", parameterToString(jobId, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "queued", "working", "failed"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeDriveDeviceCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 202 {
			var v ActiveJobStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ActiveJobStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexTapeDrivesOpts Optional parameters for the method 'IndexTapeDrives'
type IndexTapeDrivesOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    SortBy optional.Interface
    Id optional.String
    TapeLibraryId optional.String
    Name optional.String
    Serial optional.String
    Comment optional.String
    ScsiAddress optional.String
    Vendor optional.String
    Product optional.String
    Firmware optional.String
    Device optional.String
    Sgdevice optional.String
    Libso optional.String
    Acs optional.String
    Lsm optional.String
    Panel optional.String
    Transport optional.String
    Status optional.String
    Full optional.String
    MountCount optional.String
    UseTo optional.String
    UseBy optional.String
    Barcode optional.String
    TaskId optional.String
    UseFileProcessedSize optional.String
    UseFileSizeToProcess optional.String
    UseFileNameProcessed optional.String
    Bandwidth optional.String
}

/*
IndexTapeDrives Lists all tape drives.
**API Key Scope**: tape_drives / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *IndexTapeDrivesOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "SortBy" (optional.Interface of []string) -  Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
 * @param "Id" (optional.String) -  Filter on id
 * @param "TapeLibraryId" (optional.String) -  Filter on tape library id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Serial" (optional.String) -  Filter on serial
 * @param "Comment" (optional.String) -  Filter on comment
 * @param "ScsiAddress" (optional.String) -  Filter on scsi address
 * @param "Vendor" (optional.String) -  Filter on vendor
 * @param "Product" (optional.String) -  Filter on product
 * @param "Firmware" (optional.String) -  Filter on firmware
 * @param "Device" (optional.String) -  Filter on device
 * @param "Sgdevice" (optional.String) -  Filter on sgdevice
 * @param "Libso" (optional.String) -  Filter on libso
 * @param "Acs" (optional.String) -  Filter on acs
 * @param "Lsm" (optional.String) -  Filter on lsm
 * @param "Panel" (optional.String) -  Filter on panel
 * @param "Transport" (optional.String) -  Filter on transport
 * @param "Status" (optional.String) -  Filter on status
 * @param "Full" (optional.String) -  Filter on full
 * @param "MountCount" (optional.String) -  Filter on mount count
 * @param "UseTo" (optional.String) -  Filter on use to
 * @param "UseBy" (optional.String) -  Filter on use by
 * @param "Barcode" (optional.String) -  Filter on barcode
 * @param "TaskId" (optional.String) -  Filter on task id
 * @param "UseFileProcessedSize" (optional.String) -  Filter on use file processed size
 * @param "UseFileSizeToProcess" (optional.String) -  Filter on use file size to process
 * @param "UseFileNameProcessed" (optional.String) -  Filter on use file name processed
 * @param "Bandwidth" (optional.String) -  Filter on bandwidth
@return TapeDriveCollection
*/
func (a *TapeDrivesApiService) IndexTapeDrives(ctx _context.Context, localVarOptionals *IndexTapeDrivesOpts) (TapeDriveCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeDriveCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_drives"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), "pipe"))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarQueryParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TapeLibraryId.IsSet() {
		localVarQueryParams.Add("tape_library_id", parameterToString(localVarOptionals.TapeLibraryId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Serial.IsSet() {
		localVarQueryParams.Add("serial", parameterToString(localVarOptionals.Serial.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Comment.IsSet() {
		localVarQueryParams.Add("comment", parameterToString(localVarOptionals.Comment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ScsiAddress.IsSet() {
		localVarQueryParams.Add("scsi_address", parameterToString(localVarOptionals.ScsiAddress.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vendor.IsSet() {
		localVarQueryParams.Add("vendor", parameterToString(localVarOptionals.Vendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Product.IsSet() {
		localVarQueryParams.Add("product", parameterToString(localVarOptionals.Product.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Firmware.IsSet() {
		localVarQueryParams.Add("firmware", parameterToString(localVarOptionals.Firmware.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Device.IsSet() {
		localVarQueryParams.Add("device", parameterToString(localVarOptionals.Device.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sgdevice.IsSet() {
		localVarQueryParams.Add("sgdevice", parameterToString(localVarOptionals.Sgdevice.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Libso.IsSet() {
		localVarQueryParams.Add("libso", parameterToString(localVarOptionals.Libso.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Acs.IsSet() {
		localVarQueryParams.Add("acs", parameterToString(localVarOptionals.Acs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lsm.IsSet() {
		localVarQueryParams.Add("lsm", parameterToString(localVarOptionals.Lsm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Panel.IsSet() {
		localVarQueryParams.Add("panel", parameterToString(localVarOptionals.Panel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Transport.IsSet() {
		localVarQueryParams.Add("transport", parameterToString(localVarOptionals.Transport.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Full.IsSet() {
		localVarQueryParams.Add("full", parameterToString(localVarOptionals.Full.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MountCount.IsSet() {
		localVarQueryParams.Add("mount_count", parameterToString(localVarOptionals.MountCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseTo.IsSet() {
		localVarQueryParams.Add("use_to", parameterToString(localVarOptionals.UseTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseBy.IsSet() {
		localVarQueryParams.Add("use_by", parameterToString(localVarOptionals.UseBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Barcode.IsSet() {
		localVarQueryParams.Add("barcode", parameterToString(localVarOptionals.Barcode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TaskId.IsSet() {
		localVarQueryParams.Add("task_id", parameterToString(localVarOptionals.TaskId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseFileProcessedSize.IsSet() {
		localVarQueryParams.Add("use_file_processed_size", parameterToString(localVarOptionals.UseFileProcessedSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseFileSizeToProcess.IsSet() {
		localVarQueryParams.Add("use_file_size_to_process", parameterToString(localVarOptionals.UseFileSizeToProcess.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseFileNameProcessed.IsSet() {
		localVarQueryParams.Add("use_file_name_processed", parameterToString(localVarOptionals.UseFileNameProcessed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Bandwidth.IsSet() {
		localVarQueryParams.Add("bandwidth", parameterToString(localVarOptionals.Bandwidth.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeDriveCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexTapeDrivesByTapeLibraryOpts Optional parameters for the method 'IndexTapeDrivesByTapeLibrary'
type IndexTapeDrivesByTapeLibraryOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    SortBy optional.Interface
    Id optional.String
    Name optional.String
    Serial optional.String
    Comment optional.String
    ScsiAddress optional.String
    Vendor optional.String
    Product optional.String
    Firmware optional.String
    Device optional.String
    Sgdevice optional.String
    Libso optional.String
    Acs optional.String
    Lsm optional.String
    Panel optional.String
    Transport optional.String
    Status optional.String
    Full optional.String
    MountCount optional.String
    UseTo optional.String
    UseBy optional.String
    Barcode optional.String
    TaskId optional.String
    UseFileProcessedSize optional.String
    UseFileSizeToProcess optional.String
    UseFileNameProcessed optional.String
    Bandwidth optional.String
}

/*
IndexTapeDrivesByTapeLibrary Lists all tape drives.
**API Key Scope**: tape_drives / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param optional nil or *IndexTapeDrivesByTapeLibraryOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "SortBy" (optional.Interface of []string) -  Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
 * @param "Id" (optional.String) -  Filter on id
 * @param "Name" (optional.String) -  Filter on name
 * @param "Serial" (optional.String) -  Filter on serial
 * @param "Comment" (optional.String) -  Filter on comment
 * @param "ScsiAddress" (optional.String) -  Filter on scsi address
 * @param "Vendor" (optional.String) -  Filter on vendor
 * @param "Product" (optional.String) -  Filter on product
 * @param "Firmware" (optional.String) -  Filter on firmware
 * @param "Device" (optional.String) -  Filter on device
 * @param "Sgdevice" (optional.String) -  Filter on sgdevice
 * @param "Libso" (optional.String) -  Filter on libso
 * @param "Acs" (optional.String) -  Filter on acs
 * @param "Lsm" (optional.String) -  Filter on lsm
 * @param "Panel" (optional.String) -  Filter on panel
 * @param "Transport" (optional.String) -  Filter on transport
 * @param "Status" (optional.String) -  Filter on status
 * @param "Full" (optional.String) -  Filter on full
 * @param "MountCount" (optional.String) -  Filter on mount count
 * @param "UseTo" (optional.String) -  Filter on use to
 * @param "UseBy" (optional.String) -  Filter on use by
 * @param "Barcode" (optional.String) -  Filter on barcode
 * @param "TaskId" (optional.String) -  Filter on task id
 * @param "UseFileProcessedSize" (optional.String) -  Filter on use file processed size
 * @param "UseFileSizeToProcess" (optional.String) -  Filter on use file size to process
 * @param "UseFileNameProcessed" (optional.String) -  Filter on use file name processed
 * @param "Bandwidth" (optional.String) -  Filter on bandwidth
@return TapeDriveCollection
*/
func (a *TapeDrivesApiService) IndexTapeDrivesByTapeLibrary(ctx _context.Context, tapeLibraryId string, localVarOptionals *IndexTapeDrivesByTapeLibraryOpts) (TapeDriveCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeDriveCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tape_drives"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), "pipe"))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarQueryParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Name.IsSet() {
		localVarQueryParams.Add("name", parameterToString(localVarOptionals.Name.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Serial.IsSet() {
		localVarQueryParams.Add("serial", parameterToString(localVarOptionals.Serial.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Comment.IsSet() {
		localVarQueryParams.Add("comment", parameterToString(localVarOptionals.Comment.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ScsiAddress.IsSet() {
		localVarQueryParams.Add("scsi_address", parameterToString(localVarOptionals.ScsiAddress.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Vendor.IsSet() {
		localVarQueryParams.Add("vendor", parameterToString(localVarOptionals.Vendor.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Product.IsSet() {
		localVarQueryParams.Add("product", parameterToString(localVarOptionals.Product.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Firmware.IsSet() {
		localVarQueryParams.Add("firmware", parameterToString(localVarOptionals.Firmware.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Device.IsSet() {
		localVarQueryParams.Add("device", parameterToString(localVarOptionals.Device.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Sgdevice.IsSet() {
		localVarQueryParams.Add("sgdevice", parameterToString(localVarOptionals.Sgdevice.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Libso.IsSet() {
		localVarQueryParams.Add("libso", parameterToString(localVarOptionals.Libso.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Acs.IsSet() {
		localVarQueryParams.Add("acs", parameterToString(localVarOptionals.Acs.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Lsm.IsSet() {
		localVarQueryParams.Add("lsm", parameterToString(localVarOptionals.Lsm.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Panel.IsSet() {
		localVarQueryParams.Add("panel", parameterToString(localVarOptionals.Panel.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Transport.IsSet() {
		localVarQueryParams.Add("transport", parameterToString(localVarOptionals.Transport.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Status.IsSet() {
		localVarQueryParams.Add("status", parameterToString(localVarOptionals.Status.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Full.IsSet() {
		localVarQueryParams.Add("full", parameterToString(localVarOptionals.Full.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MountCount.IsSet() {
		localVarQueryParams.Add("mount_count", parameterToString(localVarOptionals.MountCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseTo.IsSet() {
		localVarQueryParams.Add("use_to", parameterToString(localVarOptionals.UseTo.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseBy.IsSet() {
		localVarQueryParams.Add("use_by", parameterToString(localVarOptionals.UseBy.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Barcode.IsSet() {
		localVarQueryParams.Add("barcode", parameterToString(localVarOptionals.Barcode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TaskId.IsSet() {
		localVarQueryParams.Add("task_id", parameterToString(localVarOptionals.TaskId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseFileProcessedSize.IsSet() {
		localVarQueryParams.Add("use_file_processed_size", parameterToString(localVarOptionals.UseFileProcessedSize.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseFileSizeToProcess.IsSet() {
		localVarQueryParams.Add("use_file_size_to_process", parameterToString(localVarOptionals.UseFileSizeToProcess.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.UseFileNameProcessed.IsSet() {
		localVarQueryParams.Add("use_file_name_processed", parameterToString(localVarOptionals.UseFileNameProcessed.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Bandwidth.IsSet() {
		localVarQueryParams.Add("bandwidth", parameterToString(localVarOptionals.Bandwidth.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeDriveCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTapeDrive Displays a specific tape drive.
**API Key Scope**: tape_drives / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeDriveId Numeric ID, serial, or name of tape drive.
@return TapeDrive
*/
func (a *TapeDrivesApiService) ShowTapeDrive(ctx _context.Context, tapeDriveId string) (TapeDrive, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeDrive
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_drives/{tape_drive_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_drive_id"+"}", _neturl.QueryEscape(parameterToString(tapeDriveId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeDrive
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTapeDriveByTapeLibrary Displays a specific tape drive.
**API Key Scope**: tape_drives / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param tapeDriveId Numeric ID, serial, or name of tape drive.
@return TapeDrive
*/
func (a *TapeDrivesApiService) ShowTapeDriveByTapeLibrary(ctx _context.Context, tapeLibraryId string, tapeDriveId string) (TapeDrive, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeDrive
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"tape_drive_id"+"}", _neturl.QueryEscape(parameterToString(tapeDriveId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeDrive
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
UpdateTapeDrive Updates a specific tape drive.
**API Key Scope**: tape_drives / update
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeDriveId Numeric ID, serial, or name of tape drive.
 * @param tapeDriveBody
@return TapeDrive
*/
func (a *TapeDrivesApiService) UpdateTapeDrive(ctx _context.Context, tapeDriveId string, tapeDriveBody TapeDrive) (TapeDrive, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeDrive
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_drives/{tape_drive_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_drive_id"+"}", _neturl.QueryEscape(parameterToString(tapeDriveId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &tapeDriveBody
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeDrive
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
UpdateTapeDriveByTapeLibrary Updates a specific tape drive.
**API Key Scope**: tape_drives / update
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param tapeDriveId Numeric ID, serial, or name of tape drive.
 * @param tapeDriveBody
@return TapeDrive
*/
func (a *TapeDrivesApiService) UpdateTapeDriveByTapeLibrary(ctx _context.Context, tapeLibraryId string, tapeDriveId string, tapeDriveBody TapeDrive) (TapeDrive, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeDrive
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tape_drives/{tape_drive_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"tape_drive_id"+"}", _neturl.QueryEscape(parameterToString(tapeDriveId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = &tapeDriveBody
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeDrive
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
