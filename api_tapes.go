/*
 * Nodeum API
 *
 * The Nodeum API makes it easy to tap into the digital data mesh that runs across your organisation. Make requests to our API endpoints and we’ll give you everything you need to interconnect your business workflows with your storage.  All production API requests are made to:  http://nodeumhostname/api/  The current production version of the API is v1.   **REST** The Nodeum API is a RESTful API. This means that the API is designed to allow you to get, create, update, & delete objects with the HTTP verbs GET, POST, PUT, PATCH, & DELETE.  **JSON** The Nodeum API speaks exclusively in JSON. This means that you should always set the Content-Type header to application/json to ensure that your requests are properly accepted and processed by the API.  **Authentication** All API calls require user-password authentication.   **Cross-Origin Resource Sharing** The Nodeum API supports CORS for communicating from Javascript for these endpoints. You will need to specify an Origin URI when creating your application to allow for CORS to be whitelisted for your domain.   **Pagination** Some endpoints such as File Listing return a potentially lengthy array of objects. In order to keep the response sizes manageable the API will take advantage of pagination. Pagination is a mechanism for returning a subset of the results for a request and allowing for subsequent requests to “page” through the rest of the results until the end is reached. Paginated endpoints follow a standard interface that accepts two query parameters, limit and offset, and return a payload that follows a standard form. These parameters names and their behavior are borrowed from SQL LIMIT and OFFSET keywords.  **Versioning** The Nodeum API is constantly being worked on to add features, make improvements, and fix bugs. This means that you should expect changes to be introduced and documented.   However, there are some changes or additions that are considered backwards-compatible and your applications should be flexible enough to handle them. These include:  - Adding new endpoints to the API - Adding new attributes to the response of an existing endpoint - Changing the order of attributes of responses (JSON by definition is an object of unordered key/value pairs)  **Filter parameters** When browsing a list of items, multiple filter parameters may be applied. Some operators can be added to the value as a prefix:  - `=` value is equal. Default operator, may be omitted  - `!=` value is different  - `>` greater than  - `>=` greater than or equal  - `<` lower than  - `>=` lower than or equal  - `><` included in list, items should be separated by `|`  - `!><` not included in list, items should be separated by `|`  - `~` pattern matching, may include `%` (any characters) and `_` (one character)  - `!~` pattern not matching, may include `%` (any characters) and `_` (one character)  
 *
 * API version: 2.1.0
 * Contact: info@nodeum.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// TapesApiService TapesApi service
type TapesApiService service

// IndexTapeStatsOpts Optional parameters for the method 'IndexTapeStats'
type IndexTapeStatsOpts struct {
    Limit optional.Int32
    Offset optional.Int32
}

/*
IndexTapeStats List all tape statistics.
**API Key Scope**: tape_stats / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *IndexTapeStatsOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
@return TapeStatCollection
*/
func (a *TapesApiService) IndexTapeStats(ctx _context.Context, localVarOptionals *IndexTapeStatsOpts) (TapeStatCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeStatCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_stats"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeStatCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexTapesOpts Optional parameters for the method 'IndexTapes'
type IndexTapesOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    SortBy optional.Interface
    Id optional.String
    TapeLibraryId optional.String
    PoolId optional.String
    Barcode optional.String
    Location optional.String
    Type_ optional.String
    Locked optional.String
    Scratch optional.String
    Cleaning optional.String
    WriteProtect optional.String
    Mounted optional.String
    Ejected optional.String
    Known optional.String
    MountCount optional.String
    DateIn optional.String
    DateMove optional.String
    Free optional.String
    Max optional.String
    LastSizeUpdate optional.String
    LastMaintenance optional.String
    LastRepack optional.String
    RepackStatus optional.String
    Hash optional.String
    ForceImportType optional.String
    NeedToCheck optional.String
}

/*
IndexTapes Lists all tapes.
**API Key Scope**: tapes / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *IndexTapesOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "SortBy" (optional.Interface of []string) -  Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
 * @param "Id" (optional.String) -  Filter on id
 * @param "TapeLibraryId" (optional.String) -  Filter on tape library id
 * @param "PoolId" (optional.String) -  Filter on a pool id
 * @param "Barcode" (optional.String) -  Filter on barcode
 * @param "Location" (optional.String) -  Filter on location
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Locked" (optional.String) -  Filter on locked
 * @param "Scratch" (optional.String) -  Filter on scratch
 * @param "Cleaning" (optional.String) -  Filter on cleaning
 * @param "WriteProtect" (optional.String) -  Filter on write protect
 * @param "Mounted" (optional.String) -  Filter on mounted
 * @param "Ejected" (optional.String) -  Filter on ejected
 * @param "Known" (optional.String) -  Filter on known
 * @param "MountCount" (optional.String) -  Filter on mount count
 * @param "DateIn" (optional.String) -  Filter on date in
 * @param "DateMove" (optional.String) -  Filter on date move
 * @param "Free" (optional.String) -  Filter on free
 * @param "Max" (optional.String) -  Filter on max
 * @param "LastSizeUpdate" (optional.String) -  Filter on last size update
 * @param "LastMaintenance" (optional.String) -  Filter on last maintenance
 * @param "LastRepack" (optional.String) -  Filter on last repack
 * @param "RepackStatus" (optional.String) -  Filter on repack status
 * @param "Hash" (optional.String) -  Filter on hash
 * @param "ForceImportType" (optional.String) -  Filter on force import type
 * @param "NeedToCheck" (optional.String) -  Filter on need to check
@return TapeCollection
*/
func (a *TapesApiService) IndexTapes(ctx _context.Context, localVarOptionals *IndexTapesOpts) (TapeCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tapes"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), "pipe"))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarQueryParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TapeLibraryId.IsSet() {
		localVarQueryParams.Add("tape_library_id", parameterToString(localVarOptionals.TapeLibraryId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PoolId.IsSet() {
		localVarQueryParams.Add("pool_id", parameterToString(localVarOptionals.PoolId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Barcode.IsSet() {
		localVarQueryParams.Add("barcode", parameterToString(localVarOptionals.Barcode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarQueryParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Locked.IsSet() {
		localVarQueryParams.Add("locked", parameterToString(localVarOptionals.Locked.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Scratch.IsSet() {
		localVarQueryParams.Add("scratch", parameterToString(localVarOptionals.Scratch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cleaning.IsSet() {
		localVarQueryParams.Add("cleaning", parameterToString(localVarOptionals.Cleaning.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WriteProtect.IsSet() {
		localVarQueryParams.Add("write_protect", parameterToString(localVarOptionals.WriteProtect.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mounted.IsSet() {
		localVarQueryParams.Add("mounted", parameterToString(localVarOptionals.Mounted.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ejected.IsSet() {
		localVarQueryParams.Add("ejected", parameterToString(localVarOptionals.Ejected.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Known.IsSet() {
		localVarQueryParams.Add("known", parameterToString(localVarOptionals.Known.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MountCount.IsSet() {
		localVarQueryParams.Add("mount_count", parameterToString(localVarOptionals.MountCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateIn.IsSet() {
		localVarQueryParams.Add("date_in", parameterToString(localVarOptionals.DateIn.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateMove.IsSet() {
		localVarQueryParams.Add("date_move", parameterToString(localVarOptionals.DateMove.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Free.IsSet() {
		localVarQueryParams.Add("free", parameterToString(localVarOptionals.Free.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Max.IsSet() {
		localVarQueryParams.Add("max", parameterToString(localVarOptionals.Max.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastSizeUpdate.IsSet() {
		localVarQueryParams.Add("last_size_update", parameterToString(localVarOptionals.LastSizeUpdate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastMaintenance.IsSet() {
		localVarQueryParams.Add("last_maintenance", parameterToString(localVarOptionals.LastMaintenance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastRepack.IsSet() {
		localVarQueryParams.Add("last_repack", parameterToString(localVarOptionals.LastRepack.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepackStatus.IsSet() {
		localVarQueryParams.Add("repack_status", parameterToString(localVarOptionals.RepackStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Hash.IsSet() {
		localVarQueryParams.Add("hash", parameterToString(localVarOptionals.Hash.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ForceImportType.IsSet() {
		localVarQueryParams.Add("force_import_type", parameterToString(localVarOptionals.ForceImportType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NeedToCheck.IsSet() {
		localVarQueryParams.Add("need_to_check", parameterToString(localVarOptionals.NeedToCheck.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexTapesByPoolOpts Optional parameters for the method 'IndexTapesByPool'
type IndexTapesByPoolOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    SortBy optional.Interface
    Id optional.String
    TapeLibraryId optional.String
    Barcode optional.String
    Location optional.String
    Type_ optional.String
    Locked optional.String
    Scratch optional.String
    Cleaning optional.String
    WriteProtect optional.String
    Mounted optional.String
    Ejected optional.String
    Known optional.String
    MountCount optional.String
    DateIn optional.String
    DateMove optional.String
    Free optional.String
    Max optional.String
    LastSizeUpdate optional.String
    LastMaintenance optional.String
    LastRepack optional.String
    RepackStatus optional.String
    Hash optional.String
    ForceImportType optional.String
    NeedToCheck optional.String
}

/*
IndexTapesByPool Lists all tapes.
**API Key Scope**: tapes / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param optional nil or *IndexTapesByPoolOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "SortBy" (optional.Interface of []string) -  Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
 * @param "Id" (optional.String) -  Filter on id
 * @param "TapeLibraryId" (optional.String) -  Filter on tape library id
 * @param "Barcode" (optional.String) -  Filter on barcode
 * @param "Location" (optional.String) -  Filter on location
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Locked" (optional.String) -  Filter on locked
 * @param "Scratch" (optional.String) -  Filter on scratch
 * @param "Cleaning" (optional.String) -  Filter on cleaning
 * @param "WriteProtect" (optional.String) -  Filter on write protect
 * @param "Mounted" (optional.String) -  Filter on mounted
 * @param "Ejected" (optional.String) -  Filter on ejected
 * @param "Known" (optional.String) -  Filter on known
 * @param "MountCount" (optional.String) -  Filter on mount count
 * @param "DateIn" (optional.String) -  Filter on date in
 * @param "DateMove" (optional.String) -  Filter on date move
 * @param "Free" (optional.String) -  Filter on free
 * @param "Max" (optional.String) -  Filter on max
 * @param "LastSizeUpdate" (optional.String) -  Filter on last size update
 * @param "LastMaintenance" (optional.String) -  Filter on last maintenance
 * @param "LastRepack" (optional.String) -  Filter on last repack
 * @param "RepackStatus" (optional.String) -  Filter on repack status
 * @param "Hash" (optional.String) -  Filter on hash
 * @param "ForceImportType" (optional.String) -  Filter on force import type
 * @param "NeedToCheck" (optional.String) -  Filter on need to check
@return TapeCollection
*/
func (a *TapesApiService) IndexTapesByPool(ctx _context.Context, poolId string, localVarOptionals *IndexTapesByPoolOpts) (TapeCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/tapes"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", _neturl.QueryEscape(parameterToString(poolId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), "pipe"))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarQueryParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.TapeLibraryId.IsSet() {
		localVarQueryParams.Add("tape_library_id", parameterToString(localVarOptionals.TapeLibraryId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Barcode.IsSet() {
		localVarQueryParams.Add("barcode", parameterToString(localVarOptionals.Barcode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarQueryParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Locked.IsSet() {
		localVarQueryParams.Add("locked", parameterToString(localVarOptionals.Locked.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Scratch.IsSet() {
		localVarQueryParams.Add("scratch", parameterToString(localVarOptionals.Scratch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cleaning.IsSet() {
		localVarQueryParams.Add("cleaning", parameterToString(localVarOptionals.Cleaning.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WriteProtect.IsSet() {
		localVarQueryParams.Add("write_protect", parameterToString(localVarOptionals.WriteProtect.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mounted.IsSet() {
		localVarQueryParams.Add("mounted", parameterToString(localVarOptionals.Mounted.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ejected.IsSet() {
		localVarQueryParams.Add("ejected", parameterToString(localVarOptionals.Ejected.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Known.IsSet() {
		localVarQueryParams.Add("known", parameterToString(localVarOptionals.Known.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MountCount.IsSet() {
		localVarQueryParams.Add("mount_count", parameterToString(localVarOptionals.MountCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateIn.IsSet() {
		localVarQueryParams.Add("date_in", parameterToString(localVarOptionals.DateIn.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateMove.IsSet() {
		localVarQueryParams.Add("date_move", parameterToString(localVarOptionals.DateMove.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Free.IsSet() {
		localVarQueryParams.Add("free", parameterToString(localVarOptionals.Free.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Max.IsSet() {
		localVarQueryParams.Add("max", parameterToString(localVarOptionals.Max.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastSizeUpdate.IsSet() {
		localVarQueryParams.Add("last_size_update", parameterToString(localVarOptionals.LastSizeUpdate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastMaintenance.IsSet() {
		localVarQueryParams.Add("last_maintenance", parameterToString(localVarOptionals.LastMaintenance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastRepack.IsSet() {
		localVarQueryParams.Add("last_repack", parameterToString(localVarOptionals.LastRepack.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepackStatus.IsSet() {
		localVarQueryParams.Add("repack_status", parameterToString(localVarOptionals.RepackStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Hash.IsSet() {
		localVarQueryParams.Add("hash", parameterToString(localVarOptionals.Hash.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ForceImportType.IsSet() {
		localVarQueryParams.Add("force_import_type", parameterToString(localVarOptionals.ForceImportType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NeedToCheck.IsSet() {
		localVarQueryParams.Add("need_to_check", parameterToString(localVarOptionals.NeedToCheck.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// IndexTapesByTapeLibraryOpts Optional parameters for the method 'IndexTapesByTapeLibrary'
type IndexTapesByTapeLibraryOpts struct {
    Limit optional.Int32
    Offset optional.Int32
    SortBy optional.Interface
    Id optional.String
    PoolId optional.String
    Barcode optional.String
    Location optional.String
    Type_ optional.String
    Locked optional.String
    Scratch optional.String
    Cleaning optional.String
    WriteProtect optional.String
    Mounted optional.String
    Ejected optional.String
    Known optional.String
    MountCount optional.String
    DateIn optional.String
    DateMove optional.String
    Free optional.String
    Max optional.String
    LastSizeUpdate optional.String
    LastMaintenance optional.String
    LastRepack optional.String
    RepackStatus optional.String
    Hash optional.String
    ForceImportType optional.String
    NeedToCheck optional.String
}

/*
IndexTapesByTapeLibrary Lists all tapes.
**API Key Scope**: tapes / index
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param optional nil or *IndexTapesByTapeLibraryOpts - Optional Parameters:
 * @param "Limit" (optional.Int32) -  The number of items to display for pagination.
 * @param "Offset" (optional.Int32) -  The number of items to skip for pagination.
 * @param "SortBy" (optional.Interface of []string) -  Sort results by attribute.  Can sort on multiple attributes, separated by `|`. Order direction can be suffixing the attribute by either `:asc` (default) or `:desc`.
 * @param "Id" (optional.String) -  Filter on id
 * @param "PoolId" (optional.String) -  Filter on a pool id
 * @param "Barcode" (optional.String) -  Filter on barcode
 * @param "Location" (optional.String) -  Filter on location
 * @param "Type_" (optional.String) -  Filter on type
 * @param "Locked" (optional.String) -  Filter on locked
 * @param "Scratch" (optional.String) -  Filter on scratch
 * @param "Cleaning" (optional.String) -  Filter on cleaning
 * @param "WriteProtect" (optional.String) -  Filter on write protect
 * @param "Mounted" (optional.String) -  Filter on mounted
 * @param "Ejected" (optional.String) -  Filter on ejected
 * @param "Known" (optional.String) -  Filter on known
 * @param "MountCount" (optional.String) -  Filter on mount count
 * @param "DateIn" (optional.String) -  Filter on date in
 * @param "DateMove" (optional.String) -  Filter on date move
 * @param "Free" (optional.String) -  Filter on free
 * @param "Max" (optional.String) -  Filter on max
 * @param "LastSizeUpdate" (optional.String) -  Filter on last size update
 * @param "LastMaintenance" (optional.String) -  Filter on last maintenance
 * @param "LastRepack" (optional.String) -  Filter on last repack
 * @param "RepackStatus" (optional.String) -  Filter on repack status
 * @param "Hash" (optional.String) -  Filter on hash
 * @param "ForceImportType" (optional.String) -  Filter on force import type
 * @param "NeedToCheck" (optional.String) -  Filter on need to check
@return TapeCollection
*/
func (a *TapesApiService) IndexTapesByTapeLibrary(ctx _context.Context, tapeLibraryId string, localVarOptionals *IndexTapesByTapeLibraryOpts) (TapeCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeCollection
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tapes"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if localVarOptionals != nil && localVarOptionals.Limit.IsSet() {
		localVarQueryParams.Add("limit", parameterToString(localVarOptionals.Limit.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Offset.IsSet() {
		localVarQueryParams.Add("offset", parameterToString(localVarOptionals.Offset.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.SortBy.IsSet() {
		localVarQueryParams.Add("sort_by", parameterToString(localVarOptionals.SortBy.Value(), "pipe"))
	}
	if localVarOptionals != nil && localVarOptionals.Id.IsSet() {
		localVarQueryParams.Add("id", parameterToString(localVarOptionals.Id.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.PoolId.IsSet() {
		localVarQueryParams.Add("pool_id", parameterToString(localVarOptionals.PoolId.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Barcode.IsSet() {
		localVarQueryParams.Add("barcode", parameterToString(localVarOptionals.Barcode.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Location.IsSet() {
		localVarQueryParams.Add("location", parameterToString(localVarOptionals.Location.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Type_.IsSet() {
		localVarQueryParams.Add("type", parameterToString(localVarOptionals.Type_.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Locked.IsSet() {
		localVarQueryParams.Add("locked", parameterToString(localVarOptionals.Locked.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Scratch.IsSet() {
		localVarQueryParams.Add("scratch", parameterToString(localVarOptionals.Scratch.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Cleaning.IsSet() {
		localVarQueryParams.Add("cleaning", parameterToString(localVarOptionals.Cleaning.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.WriteProtect.IsSet() {
		localVarQueryParams.Add("write_protect", parameterToString(localVarOptionals.WriteProtect.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Mounted.IsSet() {
		localVarQueryParams.Add("mounted", parameterToString(localVarOptionals.Mounted.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Ejected.IsSet() {
		localVarQueryParams.Add("ejected", parameterToString(localVarOptionals.Ejected.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Known.IsSet() {
		localVarQueryParams.Add("known", parameterToString(localVarOptionals.Known.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.MountCount.IsSet() {
		localVarQueryParams.Add("mount_count", parameterToString(localVarOptionals.MountCount.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateIn.IsSet() {
		localVarQueryParams.Add("date_in", parameterToString(localVarOptionals.DateIn.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.DateMove.IsSet() {
		localVarQueryParams.Add("date_move", parameterToString(localVarOptionals.DateMove.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Free.IsSet() {
		localVarQueryParams.Add("free", parameterToString(localVarOptionals.Free.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Max.IsSet() {
		localVarQueryParams.Add("max", parameterToString(localVarOptionals.Max.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastSizeUpdate.IsSet() {
		localVarQueryParams.Add("last_size_update", parameterToString(localVarOptionals.LastSizeUpdate.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastMaintenance.IsSet() {
		localVarQueryParams.Add("last_maintenance", parameterToString(localVarOptionals.LastMaintenance.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.LastRepack.IsSet() {
		localVarQueryParams.Add("last_repack", parameterToString(localVarOptionals.LastRepack.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.RepackStatus.IsSet() {
		localVarQueryParams.Add("repack_status", parameterToString(localVarOptionals.RepackStatus.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Hash.IsSet() {
		localVarQueryParams.Add("hash", parameterToString(localVarOptionals.Hash.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.ForceImportType.IsSet() {
		localVarQueryParams.Add("force_import_type", parameterToString(localVarOptionals.ForceImportType.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.NeedToCheck.IsSet() {
		localVarQueryParams.Add("need_to_check", parameterToString(localVarOptionals.NeedToCheck.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeCollection
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
MountStatusTape Get mount status of Tape.
**API Key Scope**: tapes / mount_status
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeId Numeric ID, or barcode of tape.
@return MountStatus
*/
func (a *TapesApiService) MountStatusTape(ctx _context.Context, tapeId string) (MountStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MountStatus
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tapes/{tape_id}/mount"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_id"+"}", _neturl.QueryEscape(parameterToString(tapeId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MountStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
MountStatusTapeByPool Get mount status of Tape.
**API Key Scope**: tapes / mount_status
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param tapeId Numeric ID, or barcode of tape.
@return MountStatus
*/
func (a *TapesApiService) MountStatusTapeByPool(ctx _context.Context, poolId string, tapeId string) (MountStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MountStatus
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/tapes/{tape_id}/mount"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", _neturl.QueryEscape(parameterToString(poolId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"tape_id"+"}", _neturl.QueryEscape(parameterToString(tapeId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MountStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
MountStatusTapeByTapeLibrary Get mount status of Tape.
**API Key Scope**: tapes / mount_status
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param tapeId Numeric ID, or barcode of tape.
@return MountStatus
*/
func (a *TapesApiService) MountStatusTapeByTapeLibrary(ctx _context.Context, tapeLibraryId string, tapeId string) (MountStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MountStatus
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tapes/{tape_id}/mount"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"tape_id"+"}", _neturl.QueryEscape(parameterToString(tapeId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MountStatus
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTape Displays a specific tape.
**API Key Scope**: tapes / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeId Numeric ID, or barcode of tape.
@return Tape
*/
func (a *TapesApiService) ShowTape(ctx _context.Context, tapeId string) (Tape, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Tape
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tapes/{tape_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_id"+"}", _neturl.QueryEscape(parameterToString(tapeId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v Tape
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTapeByPool Displays a specific tape.
**API Key Scope**: tapes / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param tapeId Numeric ID, or barcode of tape.
@return Tape
*/
func (a *TapesApiService) ShowTapeByPool(ctx _context.Context, poolId string, tapeId string) (Tape, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Tape
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/tapes/{tape_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", _neturl.QueryEscape(parameterToString(poolId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"tape_id"+"}", _neturl.QueryEscape(parameterToString(tapeId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v Tape
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTapeByTapeLibrary Displays a specific tape.
**API Key Scope**: tapes / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param tapeId Numeric ID, or barcode of tape.
@return Tape
*/
func (a *TapesApiService) ShowTapeByTapeLibrary(ctx _context.Context, tapeLibraryId string, tapeId string) (Tape, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Tape
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tapes/{tape_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"tape_id"+"}", _neturl.QueryEscape(parameterToString(tapeId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v Tape
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTapeStat Display statistic for a specific tape.
**API Key Scope**: tape_stats / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeId Numeric ID, or barcode of tape.
@return TapeStat
*/
func (a *TapesApiService) ShowTapeStat(ctx _context.Context, tapeId string) (TapeStat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeStat
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tapes/{tape_id}/tape_stat"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_id"+"}", _neturl.QueryEscape(parameterToString(tapeId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeStat
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTapeStatByPool Display statistic for a specific tape.
**API Key Scope**: tape_stats / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param poolId Numeric ID, or name of pool.
 * @param tapeId Numeric ID, or barcode of tape.
@return TapeStat
*/
func (a *TapesApiService) ShowTapeStatByPool(ctx _context.Context, poolId string, tapeId string) (TapeStat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeStat
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/pools/{pool_id}/tapes/{tape_id}/tape_stat"
	localVarPath = strings.Replace(localVarPath, "{"+"pool_id"+"}", _neturl.QueryEscape(parameterToString(poolId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"tape_id"+"}", _neturl.QueryEscape(parameterToString(tapeId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeStat
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

/*
ShowTapeStatByTapeLibrary Display statistic for a specific tape.
**API Key Scope**: tape_stats / show
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param tapeLibraryId Numeric ID, serial, or name of tape library.
 * @param tapeId Numeric ID, or barcode of tape.
@return TapeStat
*/
func (a *TapesApiService) ShowTapeStatByTapeLibrary(ctx _context.Context, tapeLibraryId string, tapeId string) (TapeStat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TapeStat
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/tape_libraries/{tape_library_id}/tapes/{tape_id}/tape_stat"
	localVarPath = strings.Replace(localVarPath, "{"+"tape_library_id"+"}", _neturl.QueryEscape(parameterToString(tapeLibraryId, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"tape_id"+"}", _neturl.QueryEscape(parameterToString(tapeId, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			localVarHeaderParams["Authorization"] = key
		}
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v TapeStat
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ModelError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
